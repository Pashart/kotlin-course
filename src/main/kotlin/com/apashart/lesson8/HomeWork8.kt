package com.apashart.lesson8

//Создайте функцию, которая будет анализировать входящие фразы и применять к ним различные преобразования,
// делая текст более ироничным или забавным.
// Функция должна уметь распознавать ключевые слова или условия и соответственно изменять фразу.

fun main() {

    impossible("я люблю гречку")
    getLog("Пользователь вошел в систему -> 2021-12-01 09:48:23")
    maskPersDates("4539 1488 0343 6467")
    email("username@example.com")

//Задание 4: Извлечение Имени Файла из Пути
//Описание: Дан путь к файлу "C:/Пользователи/Документы/report.txt". Извлеките название файла с расширением.
    val emailPath = "C:/Пользователи/Документы/report.txt"
    val indexOfPath = emailPath.split("/",)
    println(indexOfPath[3])


//Задание 5: Создание Аббревиатуры из Фразы. Используй split с набором символов для разделения. Используй for для перебора слов. Используй var переменную для накопления первых букв.
//Описание: У вас есть фраза, например "Объектно-ориентированное программирование". Создайте аббревиатуру из начальных букв слов (например, "ООП").

    val frazaForAbb = "Объектно-ориентированное программирование"
    val collectionFraza = frazaForAbb.split("-", " ")
    for (i in collectionFraza) {
        var simbols = i[0]
        print(simbols.uppercase())
    }



}
//Правила Проверки и Преобразования:
//Если фраза содержит слово "невозможно":
//Преобразование: Замените "невозможно" на "совершенно точно возможно, просто требует времени".
//Если фраза начинается с "Я не уверен":
//Преобразование: Добавьте в конец фразы ", но моя интуиция говорит об обратном".
//Если фраза содержит слово "катастрофа":
//Преобразование: Замените "катастрофа" на "интересное событие".
//Если фраза заканчивается на "без проблем":
//Преобразование: Замените "без проблем" на "с парой интересных вызовов на пути".
//Если фраза содержит только одно слово:
//Преобразование: Добавьте перед словом "Иногда," и после слова ", но не всегда".
//Примеры Тестовых Фраз:
//"Это невозможно выполнить за один день"
//"Я не уверен в успехе этого проекта"
//"Произошла катастрофа на сервере"
//"Этот код работает без проблем"
//"Удача"
fun impossible(string: String): String {
    string.trim()
    val transformation = when{
        string.contains("невозможно", true) -> string.replace("невозможно", "совершенно точно возможно, просто требует времени")//немного странная фраза получится если менять только 1 слово
        string.startsWith("Я не уверен", true) -> "$string, но моя интуиция говорит об обратном"
        string.contains("катастрофа", true) -> string.replace("катастрофа", "интересное событие")
        string.endsWith("без проблем", true) -> string.replace("без проблем", "с парой интересных вызовов на пути")
        !string.contains(" ", true) -> "Иногда, $string, но не всегда"
        else -> string
    }
    println(transformation)
    return transformation
}

//Задание 1: Извлечение Даты из Строки Лога. Используй indexOf или split для получения правой части сообщения.
//Описание: У вас есть строка лога вида "Пользователь вошел в систему -> 2021-12-01 09:48:23". Извлеките отдельно дату и время из этой строки и сразу распечатай их по очереди.
fun getLog (string: String): String {
    val result = string.substring(2+(string.indexOf('>')))
    println(result.split(" ")[0])
    println(result.split(" ")[1])
    return result
}

//Задание 2: Маскирование Личных Данных
//Описание: Дана строка с номером кредитной карты "4539 1488 0343 6467". Замаскируйте все цифры, кроме последних четырех, символами "*".
fun maskPersDates (string: String) {
//    val result = string.substring(15)
//    println("**** **** **** $result")
//    return result
    return println("**** **** **** ${string.substring(15)}")
}
//Задание 3: Форматирование Адреса Электронной Почты. Используй replace
//Описание: У вас есть электронный адрес "username@example.com". Преобразуйте его в строку "username [at] example [dot] com".
fun email (string: String) {
    val newString = string.replace("@", " [at] ")
    println(newString.replace(".", " [dot] "))
//    var newString = when {
//        string.contains("@") -> {
//            string.replace("@", " [at] ")
//        }
//        else -> {
//            println(string)
//        }
//    }
//    println()
}

//Задание 4 см. выше
//Задание 5 см. выше

//Дополнительные задания
//Написать метод, который преобразует строку из нескольких слов в строку, где каждое слово начинается с заглавной буквы а все остальные - строчные. (можно использовать такой же подход как в задании 5, но накапливать не первые буквы а целиком слова, составленные из первой буквы с uppercase и оставшейся части слова)
//Написать шифратор/дешифратор для строки. Шифровка производится путём замены двух соседних букв между собой: Kotlin шифруется в oKltni. Дешифровка выполняется аналогично. Если длина строки - нечётная, в конец добавляется символ пробела до начала шифрования. Таким образом все шифрованные сообщения будут с чётной длинной. Должно получиться два публичных метода: encrypt() и decrypt() которые принимают и возвращают строку.
//Таблица с примерами форматирования строк
//https://docs.google.com/spreadsheets/d/11hRZpqELzL35UCwQoZioEzK1f1FTYrSRj_lh-14rzXA/edit?usp=drive_link
//Таблица умножения
//
//Вывести таблицу умножения в консоль так, чтобы были ровные строки и столбцы. В заголовках столбцов и строк - числа для перемножения. В перекрестии - результат умножения. Каждый столбец должен быть выровнен по правому краю.
//Для печати результата в той же строке использовать print()
//Для перехода на следующую строку использовать println()
//Для выравнивания использовать функции форматирования строк с шаблоном (%s)
//
//
//
//Результат должен выглядеть так:
//
//
//
//Для усложнения задачи, можно в метод передавать размерность таблицы по вертикали и горизонтали и динамически рассчитывать количество пробелов для форматирования.
//
//

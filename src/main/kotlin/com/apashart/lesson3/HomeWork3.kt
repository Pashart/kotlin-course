package com.apashart.lesson3
/*
//Условия
/*
Для каждого из полей подбери наилучший способ хранения из известных тебе.
Учитывай такие факторы, как:
 - изменяемость,
 - обязательность,
 - возможность начальной установки,
 - ресурсоёмкие вычисления значения,
 - необходимость проверки устанавливаемого значения на валидность
 - запрет доступа на установку при возможности чтения, публичность и приватность данных.
 */

//1. Название мероприятия

const val NAME_EVENT: String = "Встеча встреч"

//Дата проведения

var DATE_EVENT: String = "17 Февраля" //перенести мероприятие можно

//Место проведения

var placeEvent: String = "Пискунова 16"

//Подробный бюджет мероприятия, включая расходы на оборудование, кейтеринг и другие операционные расходы.

private var totalReportEvent: String = "Подробный бюджет мероприятия, включая расходы на оборудование, кейтеринг и другие операционные расходы"

//Количество участников (Как все зарегаются так и внесем)

var countParticipants: Int = 0
    get() = field
    private set(value) {field=value} //set приватный, нельзя залезть с наружи, только изнутри. в Фигурных можно указать условие о максимальном кол-ве участников

//Длительность хакатона

const val DURATION: Long = 8*60*60

//Контактная информация и условия соглашений с поставщиками пищи, оборудования и других услуг.

private lateinit var infoAgreement: String

//Текущее состояние хакатона (статус)

var status: String = "Не начат"

//Список спонсоров

val sponsorList = "Спонсор1, спонсор2"

//Бюджет мероприятия ТУТ

private var budgetEvent: String by lazy {
    "Бюджет мероприятия"
}

//Текущий уровень доступа к интернету

var levelIntetnet: Double = 1.1

//Информация о транспортировке оборудования, распределении ресурсов и координации между различными командами поддержки.

var infoSupport: String = "Информация о транспортировке оборудования, распределении ресурсов и координации между различными командами поддержки."

//Количество команд

var countTeam: Int = 0

//Перечень задач

val taskList: String = "Задача 1, задача 2" //может быть здесь const val?

//План эвакуации

val planEvacuation = "План эвакуации" //лучше делать не константой, потому что это просто ссылка на картинку

//Список доступного оборудования

var listEquipment = "equipment"

//Список свободного оборудования

private var freeEquipment: String = "equipment"

//График питания участников (зависит от поставщика питания, определяемого за неделю до начала)

lateinit var menu: String

//План мероприятий на случай сбоев

val backupPlan: String = "План мероприятий" //просто план

//Список экспертов и жюри

var listExperts = "Список"

//Методы и процедуры для сбора отзывов от участников и гостей, включая анонимные опросы и интервью.

val listFeedbackMethod: String by lazy {
    "Методы и процедуры для сбора отзывов от участников и гостей, включая анонимные опросы и интервью."
}

//Политика конфиденциальности

const val PRIVACY_POLICY = "privacy policy"

//Приватные отзывы (фидбэк) участников и зрителей для анализа проблем.

private val feedbackPrivacy: String by lazy {
    "отзывы (фидбэк)"
}

//Текущая температура в помещении

var temperature: Double = 0.0

//Мониторинг и анализ производительности сетевого оборудования и интернет-соединения.

private var levelMonitoringStr: String = "level monitoring"

//Уровень освещения

var levelLight: Double = 0.0

//Лог событий мероприятия

var log: String = "dkjf"

//Доступность медицинской помощи

var medicalAssistance = true

//Планы и процедуры для обеспечения безопасности мероприятия, включая планы эвакуации и протоколы чрезвычайных ситуаций.

private val safePlan: String = "План"

//Регистрационный номер мероприятия

val registeredNumber: Int = 134392

//Максимально допустимый уровень шума в помещении хакатона.

const val noiseLevelMax: Int = 12

//Индикатор превышения уровня шума в помещениях

var noiseLevel = false

//Формат мероприятия (зависит от геополитической обстановки)

var formatEvent: String = "Format"

//Количество свободных мест для отдыха (например, кресел или диванов), сеттер валидирует, чтобы количество не было меньше нуля.

var freeSeat: Int = 0
    get() = field
    set(value) {
        if (value >= 0) field
    }

//План взаимодействия с прессой

private var planPress: String = "Plan"

//Детальная информация о проектах каждой команды, сбор данных включает в себя компиляцию кода и сбор статистики прогона автоматизированных проверок.

var infoProject = "<UNK>"

//Статус получения всех необходимых разрешений

var permission = false

//Указывает, открыт ли доступ к эксклюзивным ресурсам (например, специальному оборудованию)

var resourceAccess = false

//Список партнеров мероприятия

var partnerList = "<UNK> <UNK>"

//Отчет, включающий фотографии, видео и отзывы, генерируется и становится доступен после завершения мероприятия.

var reportEvent: String by lazy {
    "Отчет, включающий фотографии, видео и отзывы, генерируется и становится доступен после завершения мероприятия."
}

//План распределения призов

val prizePlan: String = "План"

//Контактная информация экстренных служб, медицинского персонала и других важных служб, недоступная участникам.

private const val CONTACT_SPECIAL = "<UNK>"

//Особые условия для участников с ограниченными возможностями

val a11y: String = "условия"

//Общее настроение участников (определяется опросами)

val moodMembers: String by lazy {
    "Общее настроение участников" //Опрос будет в конце и мы в конце сможем узнать результат. и он не поменятся. Сбор инфы из запросов производится через код
}

//Подробный план хакатона, включающий время и содержание каждого сегмента, инициализируется непосредственно перед началом мероприятия.

lateinit var planHakaton: String

//Имя знаменитого специального гостя, которое будет объявлено за день до мероприятия.

lateinit var specialityGuest = "Name"

//Максимальное количество людей, которое может вместить место проведения.

const val MAX_COUNT_MEMBERS: Int = 100

//Стандартное количество часов, отведенное каждой команде для работы над проектом.

var timeWork = 4*60*60


 */
